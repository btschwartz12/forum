// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
    users
WHERE
    id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT
    id, username, password, is_admin
FROM
    users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id, username, password, is_admin
FROM
    users
WHERE
    username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (username, password, is_admin)
VALUES
    (?, ?, ?)
RETURNING
    id
`

type InsertUserParams struct {
	Username string
	Password string
	IsAdmin  int64
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Username, arg.Password, arg.IsAdmin)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
    users
SET
    username = ?,
    password = ?,
    is_admin = ?
WHERE
    id = ?
`

type UpdateUserParams struct {
	Username string
	Password string
	IsAdmin  int64
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.IsAdmin,
		arg.ID,
	)
	return err
}

const usernameExists = `-- name: UsernameExists :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            users
        WHERE
            username = ?
    )
`

func (q *Queries) UsernameExists(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, usernameExists, username)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
